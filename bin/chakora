#!/usr/bin/perl -w
#
# /  __ \ |         | |                  
# | /  \/ |__   __ _| | _____  _ __ __ _ 
# | |   | '_ \ / _` | |/ / _ \| '__/ _` |
# | \__/\ | | | (_| |   < (_) | | | (_| |
#  \____/_| |_|\__,_|_|\_\___/|_|  \__,_|
#          Chakora IRC Services
#
# Core file.
use strict;
use warnings;
use IO::Socket;
use Config::Scoped;
use File::Data;
use Getopt::Long;
use POSIX qw(setsid);

use lib "../lib";


my (%options, $PID);
# Get command line options
GetOptions("help" => \$options{help},
	   "debug" => \$options{debug},
	  );

unless ($options{debug}) {
	print("Becoming a daemon...\n");
	open STDIN, '/dev/null'   or error("chakora", "Can't read /dev/null: $!");
	open STDOUT, '>>/dev/null' or error("chakora", "Can't write to /dev/null: $!");
	open STDERR, '>>/dev/null' or error("chakora", "Can't write to /dev/null: $!");
	my $pid = fork();
	unless ($pid == 0) {
		svsflog("chakora", "Successfully forked into the background. Process ID: ".$pid);
		exit;
	}
	setsid or error("chakora", "Can't start a new session: $!");
}

# Okay! Here we go!
print("Chakora IRC Services started at ".time()."\n");
svsflog("chakora", "Chakora IRC Services started.");

# Handle --help
if ($options{help}) {
	print("**Chakora Help**\n");
	print("--debug = Run in debug mode\n");
	print("--help = Return this help menu\n");
	exit;
}

# Don't allow Chakora to run as root
if (`whoami` eq "root\n") { 
	error("chakora", "We forbid the running of Chakora as root."); 
}

# Get configuration values
my $conf = Config::Scoped->new(
	file => "../etc/chakora.conf",
	) or die("We couldn't open the config file!\n");

# Put them into variables	
my $settings = $conf->parse;

# Create some variables for later use
our (%rawcmds, %PROTO_SETTINGS, %COMMANDS);

if (lc(config('server', 'ircd')) eq 'inspircd') 
{
	require Chakora::Protocol::InspIRCd;
} elsif  (lc(config('server', 'ircd')) eq 'charybdis') 
{
	require Chakora::Protocol::Charybdis;
} else 
{
	error("error", "This protocol isn't supported by Chakora.");
}

	
	
# Open the socket and connect to the server
my $socket = IO::Socket::INET->new(
	Proto => "tcp",
	LocalAddr => config('server', 'vhost'),
	PeerAddr => config('server', 'host'),
	PeerPort => config('server', 'port'),
	) or die("Connection to ".config('server', 'host')." failed.\n");

# Create some variables for later use
my ($data, $ex, @ex);
my $synced = 0;
my ($INSPIRCD_SERVICES_ACCOUNT_MOD);

# Connect!
irc_connect();

while ($data = <$socket>) 
{
	
	chomp($data);
	undef $ex;
	@ex = split(' ', $data);
	
	print("[IRC] ".$data."\n");
	
	if ($ex[0] eq 'CAPAB' and $ex[1] eq 'MODULES' and lc(config('server', 'ircd')) eq 'inspircd') {
		# stop if m_invisible is loaded, this will not be removed - so don't ask
		if ($data =~ m/m_invisible.so/) {
			error("chakora", "We forbid the use of Chakora with InspIRCd with m_invisible.so loaded, please unload it then try again!");
		}
		# check for m_services_account
		if ($data =~ m/m_services_account.so/) {
			$INSPIRCD_SERVICES_ACCOUNT_MOD = 1;
		}
	}
	# Check for status modes
	elsif ($ex[0] eq 'CAPAB' and $ex[1] eq 'CAPABILITIES' and lc(config('server', 'ircd')) eq 'inspircd') {
		if ($data =~ m/PREFIX=(qaohv)/) {
			$PROTO_SETTINGS{owner} = 'q';
			$PROTO_SETTINGS{admin} = 'a';
			$PROTO_SETTINGS{halfop} = 'h';
		} elsif ($data =~ m/PREFIX=(aohv)/) {
			$PROTO_SETTINGS{admin} = 'a';
			$PROTO_SETTINGS{halfop} = 'h';
		} elsif ($data =~ m/PREFIX=(qohv)/) {
			$PROTO_SETTINGS{owner} = 'q';
			$PROTO_SETTINGS{halfop} = 'h';
		} elsif ($data =~ m/PREFIX=(qaov)/) {
			$PROTO_SETTINGS{owner} = 'q';
			$PROTO_SETTINGS{admin} = 'a';
		} elsif ($data =~ m/PREFIX=(aov)/) {
			$PROTO_SETTINGS{admin} = 'a';
		} elsif ($data =~ m/PREFIX=(qov)/) {
			$PROTO_SETTINGS{owner} = 'q';
		} elsif ($data =~ m/PREFIX=(ohv)/) {
			$PROTO_SETTINGS{halfop} = 'h';
		} else {
			print("[PROTOCOL] +qah are disabled, we recommend enabling these then restarting services.\n");
		}
	}
	# InspIRCd: CAPAB END recieved
	elsif ($ex[0] eq 'CAPAB' and $ex[1] eq 'END' and lc(config('server', 'ircd')) eq 'inspircd') {
		if ($INSPIRCD_SERVICES_ACCOUNT_MOD != 1) {
			error("chakora", "When using Chakora with InspIRCd, m_services_account.so is needed, please load it and try again!");
		}
		raw_capabend();
	}

	# Charybdis: syncing done
	if ($ex[0] eq 'PING' and $synced ne 1 and lc(config('server', 'ircd')) eq 'charybdis') {
		$synced = 1;
		raw_endsync();
	}
	# Charybdis: Respond to PING's
	elsif ($ex[0] eq 'PING' and $synced ne 0 and lc(config('server', 'ircd')) eq 'charybdis') {
		raw_ping($data);
	}

	# Handle a command, if a handler is defined in the protocol module
	if ($rawcmds{$ex[1]}{handler}) 
	{
		my $sub_ref = $rawcmds{$ex[1]}{handler};
		eval 
		{
			&{ $sub_ref }($data);
		};
	}
	
}

sub send_sock {
	my ($str) = @_;
	chomp($str);
	send($socket, $str."\r\n", 0);
	print("[YOU] ".$str."\n");
}

sub config {
	my ($block, $name) = @_;
	$block = lc($block);
	$name = lc($name);
	if (defined $settings->{$block}->{$name}) 
	{
		return $settings->{$block}->{$name};
	} else 
	{
		return 0;
	}
}

sub error {
	my ($type, $msg) = @_;
	print("[ERROR] ".$msg."\n");
	my ($file);
	if ($type ne 0) 
	{
		$type = lc($type);
		svsflog($type, "[ERROR] ".$msg);
	}
	exit;
}	

sub svsflog {
	my ($type, $str) = @_;
	my $file = $type.".log";
	unless (-d "../var") {
		`mkdir ../var`;
	}
	`touch ../var/$file`;
	open FILE, ">>../var/$file" or print("[FATAL] $file: Unable to open log file! Abort!\n") and exit;
	print FILE "(".time().") ".$str."\n"; 
	close FILE; 
}

sub cmd_add {
	my ($name, $author, $version, $shelp, $fhelp, $handler, $ircd) = @_;
	print("[MODULES] Attempting to load module: ".$name." v".$version." by ".$author."\n");
	svsflog("chakora", "[MODULES] Attempting to load module: ".$name." v".$version." by ".$author."\n");
	$ircd = lc($ircd);
	if ($ircd ne 'all' and $ircd ne lc(config('server', 'ircd'))) {
		print("[MODULES] Module ".$name." refusing to load: Protocol not supported.\n");
		svsflog("chakora", "[MODULES] Module ".$name." refusing to load: Protocol not supported.");
	} else {
		my @rname = split('/', $name);
		$COMMANDS{$rname[0]}{$rname[1]}{name} = $name;
		$COMMANDS{$rname[0]}{$rname[1]}{author} = $author;
		$COMMANDS{$rname[0]}{$rname[1]}{version} = $version;
		$COMMANDS{$rname[0]}{$rname[1]}{help}{short} = $shelp;
		$COMMANDS{$rname[0]}{$rname[1]}{help}{full} = $fhelp;
		$COMMANDS{$rname[0]}{$rname[1]}{handler} = $handler;
		print("[MODULES] ".$name.": Module successfully loaded.\n");
		svsflog("chakora", "[MODULES] ".$name.": Module successfully loaded.");
	}
}
